;; NFT marketplace smart contract

;; storage scheme
;; storage#_ owner_address:MsgAddress
;;           = Storage;

(cell, cell, cell) load_data(int what) inline {
    slice ds = get_data().begin_parse();
    cell item_code = ds~load_ref();
    if (what == 0) { ;; item code
        return (item_code, _, _);
    }
    cell collection_code = ds~load_ref();
    if (what == 1) { ;; item and collection code
        return (item_code, collection_code, _);
    }
    if (what == 2) { ;; owner address
        return (item_code, collection_code, ds~load_ref());
    }
}

() save_data(slice item_code, slice collection_code, slice owner_address) impure inline {
    set_data(begin_cell()
        .store_slice(item_code)
        .store_slice(collection_code)
        .store_slice(owner_address)
        .end_cell());
}

;; TODO
() create_contract(int index, cell code) impure inline {
    (slice x, int ok) = items.udict_get?(64, index);
    throw_unless(39, ok);
    builder msg = begin_cell() ;; create a new collection contract
        .store_uint(0x10, 6)
        .store_slice(x) ;; store address and amount
        .store_uint(0x6, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(begin_cell().store_uint(0x6, 5).store_ref(code).store_ref(x~load_ref()).end_cell());
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors
}

builder get_address(int wc, int random_hash) inline {
  return begin_cell()
         .store_uint(4, 3)
         .store_int(wc, 8)
         .store_uint(random_hash, 256);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    if (op == 1) { ;; deploy one nft_collection_editable and all nft_item_editable
        (slice item_code, slice collection_code, _) = load_data(1);
        cell items = in_msg_body~load_dict();
        (int item_index, slice x, int f?) = items~udict::delete_get_min(64);
        builder msg = begin_cell() ;; create a new collection contract
            .store_uint(0x10, 6)
            .store_builder(get_address(workchain(), x~load_uint(256))) ;; store address and amount
            .store_coins(x~load_coins())
            .store_uint(0x6, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(begin_cell().store_uint(0x6, 5).store_ref(collection_code).store_ref(x~load_ref()).end_cell());
        send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors
        repeat(total_items) {

        }
    }
}

() recv_external(slice in_msg) {
}